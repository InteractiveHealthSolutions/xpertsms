package org.irdresearch.tbreach.client;

import java.util.Date;
import java.util.Iterator;

import org.irdresearch.tbreach.shared.AccessType;
import org.irdresearch.tbreach.shared.CustomMessage;
import org.irdresearch.tbreach.shared.ErrorType;
import org.irdresearch.tbreach.shared.InfoType;
//import org.irdresearch.tbreach.shared.RegexUtil;
import org.irdresearch.tbreach.shared.TBR;
import org.irdresearch.tbreach.shared.UserRightsUtil;
import org.irdresearch.tbreach.shared.model.MessageSettings;
import org.irdresearch.tbreach.shared.model.Users;


import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;

import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.CheckBox;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.Grid;

import com.google.gwt.user.client.ui.HasVerticalAlignment;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.Panel;
import com.google.gwt.user.client.ui.RichTextArea;
import com.google.gwt.user.client.ui.TextArea;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.TextBoxBase;

import com.google.gwt.user.client.ui.Widget;

import com.google.gwt.user.datepicker.client.DatePicker;

public class MessageSettingsComposite extends Composite implements IForm, ClickHandler, ChangeHandler, ValueChangeHandler<Boolean>
{
	private static ServerServiceAsync	service				= GWT.create(ServerService.class);
	private static LoadingWidget		loading				= new LoadingWidget();
	private static final String			menuName			= "SETUP";
	

	private UserRightsUtil				rights				= new UserRightsUtil();
	private boolean						valid;
	private MessageSettings				current;

	private FlexTable					flexTable			= new FlexTable();
	private FlexTable					topFlexTable		= new FlexTable();
	private FlexTable					leftFlexTable		= new FlexTable();
	private FlexTable					rightFlexTable		= new FlexTable();
	private Grid						grid				= new Grid(1, 3);

	private CheckBox					sendToPatientCheckBox  = new CheckBox(/*"Send Message to Patient"*/);
	//private TextArea					patientTextTextArea	   = new TextArea();
	private CheckBox					sendToProviderCheckBox = new CheckBox(/*"Send Message to Provider"*/);
	//private TextArea					providerTextTextArea   = new TextArea();
	private CheckBox					sendToProgramCheckBox  = new CheckBox(/*"Send Message to Program"*/);
	//private TextArea					programTextTextArea	   = new TextArea();
	private TextBox						programNumberTextBox   = new TextBox();
	private CheckBox					sendToOtherCheckBox    = new CheckBox(/*"Send Message to Other Number"*/);
	//private TextArea					otherTextTextArea	   = new TextArea();
	private TextBox						otherNumberTextBox	   = new TextBox();

	//private Button						
	private Button						saveButton			= new Button("Save");
	private Button						deleteButton		= new Button("Delete");
	private Button						closeButton			= new Button("Close");

	private Label						lblMessageSettings	= new Label("Message Settings");
	private Label						lblSendToPatient    = new Label("Send Message to Patient");
	//private Label						lblTextForPatient	= new Label("Patient SMS Text:");
	private Label						lblSendToProvider	= new Label("Send Message to Provider");
	//private Label						lblTextForProvider	= new Label("Provider SMS Text:");
	private Label						lblSendToProgram	= new Label("Send Message to Program");
	//private Label						lblTextForProgram	= new Label("Program SMS Text:");
	private Label						lblProgramNumber	= new Label("Program Cell Number:");
	private Label						lblSendToOther		= new Label("Send Message to Other Number");
	//private Label						lblTextForOther		= new Label("Other SMS Text:");
	private Label						lblOtherNumber		= new Label("Other Cell Number:");
	

	public MessageSettingsComposite()
	{
		String taWidth = "400px";
		String taHeight = "100px";
		
		initWidget(flexTable);
		flexTable.setSize("80%", "100%");
		flexTable.setWidget(0, 1, topFlexTable);
		lblMessageSettings.setStyleName("title");
		topFlexTable.setWidget(0, 0, lblMessageSettings);
		flexTable.setWidget(1, 0, leftFlexTable);
		/*leftFlexTable.setWidget(0, 0, lblSendToProvider);
		searchMRNoTextBox.setVisibleLength(11);
		searchMRNoTextBox.setMaxLength(11);
		leftFlexTable.setWidget(1, 0, searchMRNoTextBox);
		searchButton.setEnabled(false);
		searchButton.setText("Search");
		leftFlexTable.setWidget(2, 0, searchButton);
		leftFlexTable.setWidget(3, 0, IRSListBox);
		IRSListBox.setVisibleItemCount(5);
		leftFlexTable.getCellFormatter().setHorizontalAlignment(2, 0, HasHorizontalAlignment.ALIGN_CENTER);*/
		
		flexTable.setWidget(1, 1, rightFlexTable);
		rightFlexTable.setSize("100%", "100%");
		
		//rightFlexTable.setWidget(0, 0, lblSendToPatient);
		rightFlexTable.setWidget(0, 0, sendToPatientCheckBox);
		rightFlexTable.setWidget(0, 1, lblSendToPatient);
		/*rightFlexTable.setWidget(1, 0, lblTextForPatient);
		patientTextTextArea.setSize(taWidth, taHeight);
		rightFlexTable.setWidget(1, 1, patientTextTextArea);*/
		
		//rightFlexTable.setWidget(2, 0, lblSendToProvider);
		rightFlexTable.setWidget(1, 0, sendToProviderCheckBox);
		rightFlexTable.setWidget(1, 1, lblSendToProvider);
		/*rightFlexTable.setWidget(3, 0, lblTextForProvider);
		providerTextTextArea.setSize(taWidth, taHeight);
		rightFlexTable.setWidget(3, 1, providerTextTextArea);*/
		
		//rightFlexTable.setWidget(4, 0, lblSendToProgram);
		rightFlexTable.setWidget(2, 0, sendToProgramCheckBox);
		rightFlexTable.setWidget(2, 1, lblSendToProgram);
		/*rightFlexTable.setWidget(5, 0, lblTextForProgram);
		programTextTextArea.setSize(taWidth, taHeight);
		rightFlexTable.setWidget(5, 1, programTextTextArea);*/
		rightFlexTable.setWidget(3 ,0, lblProgramNumber);
		rightFlexTable.setWidget(3 ,1, programNumberTextBox);
		
		//rightFlexTable.setWidget(7, 0, lblSendToOther);
		rightFlexTable.setWidget(4, 0, sendToOtherCheckBox);
		rightFlexTable.setWidget(4, 1, lblSendToOther);
		/*rightFlexTable.setWidget(8, 0, lblTextForOther);
		otherTextTextArea.setSize(taWidth, taHeight);
		rightFlexTable.setWidget(8, 1, otherTextTextArea);*/
		rightFlexTable.setWidget(5 ,0, lblOtherNumber);
		rightFlexTable.setWidget(5 ,1, otherNumberTextBox);
		
		
		//createButton.setEnabled(false);
		//rightFlexTable.setWidget(10, 0, createButton);
		rightFlexTable.setWidget(10, 1, grid);
		grid.setSize("100%", "100%");
		saveButton.setEnabled(false);
		grid.setWidget(0, 0, saveButton);
		deleteButton.setEnabled(false);
		//grid.setWidget(0, 1, deleteButton);
		grid.setWidget(0, 1, closeButton);
		flexTable.getRowFormatter().setVerticalAlign(1, HasVerticalAlignment.ALIGN_TOP);

		
		//createButton.addClickHandler(this);
		saveButton.addClickHandler(this);
		deleteButton.addClickHandler(this);
		closeButton.addClickHandler(this);
		sendToPatientCheckBox.addValueChangeHandler(this);
		sendToProviderCheckBox.addValueChangeHandler(this);
		sendToProgramCheckBox.addValueChangeHandler(this);
		sendToOtherCheckBox.addValueChangeHandler(this);

		setRights(menuName);
		fillData();
		
	}

	public void refreshList()
	{
		/* not implemented */
	}

	/**
	 * Display/Hide main panel and loading widget
	 * 
	 * @param status
	 */
	public void load(boolean status)
	{
		flexTable.setVisible(!status);
		if (status)
			loading.show();
		else
			loading.hide();
	}

	public void clearControls(Widget w)
	{
		if (w instanceof Panel)
		{
			Iterator<Widget> iter = ((Panel) w).iterator();
			while (iter.hasNext())
				clearControls(iter.next());
		}
		else if (w instanceof TextBoxBase)
		{
			((TextBoxBase) w).setText("");
		}
		else if (w instanceof RichTextArea)
		{
			((RichTextArea) w).setText("");
		}
		else if (w instanceof ListBox)
		{
			((ListBox) w).setSelectedIndex(0);
		}
		else if (w instanceof DatePicker)
		{
			((DatePicker) w).setValue(new Date());
		}
	}

	public void setCurrent()
	{
		current.setSendToPatient(sendToPatientCheckBox.getValue());
		//current.setPatientText(TBRClient.get(patientTextTextArea));
		
		current.setSendToProvider(sendToProviderCheckBox.getValue());
		//current.setProviderText(TBRClient.get(providerTextTextArea));
		
		current.setSendToProgram(sendToProgramCheckBox.getValue());
		//current.setProgramText(TBRClient.get(programTextTextArea));
		current.setProgramNumber(TBRClient.get(programNumberTextBox ));
		
		current.setSendToOther(sendToOtherCheckBox.getValue());
		//current.setOtherText(TBRClient.get(otherTextTextArea));
		current.setOtherNumber(TBRClient.get(otherNumberTextBox ));
		
		
	}

	@Override
	public void fillData()
	{
		try
		{
			service.findMessageSettings(new AsyncCallback<MessageSettings>()
			{
				@Override
				public void onSuccess(MessageSettings result)
				{
					current = result;
					
					//patient
					sendToPatientCheckBox.setValue(current.getSendToPatient());
					//patientTextTextArea.setText(current.getPatientText());
					//patientTextTextArea.setEnabled(current.getSendToPatient());
					
					
					//provider
					sendToProviderCheckBox.setValue(current.getSendToProvider());
					//providerTextTextArea.setText(current.getProviderText());
					//providerTextTextArea.setEnabled(current.getSendToProvider());
					
					
					//program
					sendToProgramCheckBox.setValue(current.getSendToProgram());
					//programTextTextArea.setText(current.getProgramText());
					programNumberTextBox.setText(current.getProgramNumber());
					//programTextTextArea.setEnabled(current.getSendToProgram());
					programNumberTextBox.setEnabled(current.getSendToProgram());
					
					//other
					sendToOtherCheckBox.setValue(current.getSendToOther());
					//otherTextTextArea.setText(current.getOtherText());
					otherNumberTextBox.setText(current.getOtherNumber());
					//otherTextTextArea.setEnabled(current.getSendToOther());
					otherNumberTextBox.setEnabled(current.getSendToOther());
					
					load(false);
				}

				@Override
				public void onFailure(Throwable caught)
				{
					load(false);
				}
			});
		}
		catch (Exception e)
		{
			e.printStackTrace();
			load(false);
		}
	}

	@Override
	public void clearUp()
	{
		clearControls(flexTable);
	}

	@Override
	public boolean validate()
	{
		final StringBuilder errorMessage = new StringBuilder();
		valid = true;
		if(sendToProgramCheckBox.getValue() && TBRClient.get(programNumberTextBox).equals("")) {

			errorMessage.append("Please enter a Program cell number");
			valid = false;
		}
		
		if(sendToOtherCheckBox.getValue() && TBRClient.get(otherNumberTextBox).equals("")) {

			errorMessage.append("Please enter a cell number for Other");
			valid = false;
		}
		/* Validate mandatory fields 
		if (TBRClient.get(patientIdTextBox).equals("") || TBRClient.get(mrNoTextBox).equals("") || TBRClient.get(irsTextBox).equals(""))
		{
			errorMessage.append(CustomMessage.getErrorMessage(ErrorType.EMPTY_DATA_ERROR) + "\n");
			valid = false;
		}
		 Validate data-type rules 
		if (!RegexUtil.isNumeric(TBRClient.get(irsTextBox), false) || TBRClient.get(patientIdTextBox).length() < 11)
		{
			errorMessage.append(CustomMessage.getErrorMessage(ErrorType.INVALID_DATA_ERROR) + "\n");
			valid = false;
		}
		 Validate Patient ID 
		for(char ch : TBRClient.get(patientIdTextBox).toCharArray())
		{
			if(!Character.isDigit(ch))
			{
				errorMessage.append("Patient ID is invalid.\n");
				valid = false;
			}
		}*/
		if (!valid)
		{
			Window.alert(errorMessage.toString());
			load(false);
		}
		return valid;
	}

	@Override
	public void saveData()
	{
	 /* Not implemented */	
	}

	@Override
	public void updateData()
	{
		if (validate())
		{
			try
			{
				setCurrent();
				service.updateMessageSettings(current, new AsyncCallback<Boolean>()
				{
					@Override
					public void onSuccess(Boolean result)
					{
						if (result)
							Window.alert(CustomMessage.getInfoMessage(InfoType.UPDATED));
						else
							Window.alert(CustomMessage.getErrorMessage(ErrorType.UPDATE_ERROR));
						load(false);
					}

					@Override
					public void onFailure(Throwable caught)
					{
						Window.alert(CustomMessage.getErrorMessage(ErrorType.UPDATE_ERROR));
					}
				});
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}

	@Override
	public void deleteData()
	{
		/* Not implemented */
	}

	@Override
	public void setRights(String menuName)
	{
		try
		{
			load(true);
			service.getUserRgihts(TBR.getCurrentUser(), menuName, new AsyncCallback<Boolean[]>()
			{
				@Override
				public void onSuccess(Boolean[] result)
				{
					final Boolean[] userRights = result;
					try
					{
						service.findUser(TBR.getCurrentUser(), new AsyncCallback<Users>()
						{
							@Override
							public void onSuccess(Users result)
							{
								rights.setRoleRights(result.getRole(), userRights);
								//searchButton.setEnabled(rights.getAccess(AccessType.SELECT));
								//createButton.setEnabled(rights.getAccess(AccessType.INSERT));
								saveButton.setEnabled(rights.getAccess(AccessType.UPDATE));
								deleteButton.setEnabled(rights.getAccess(AccessType.DELETE));
								load(false);
							}

							@Override
							public void onFailure(Throwable caught)
							{
								load(false);
							}
						});
					}
					catch (Exception e)
					{
						e.printStackTrace();
					}
				}

				@Override
				public void onFailure(Throwable caught)
				{
					load(false);
				}
			});
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	@Override
	public void onClick(ClickEvent event)
	{
		Widget sender = (Widget) event.getSource();
		load(true);
		/*if (sender == searchButton)
		{
			refreshList();
		}
		else if (sender == IRSListBox)
		{
			fillData();
		}
		else if (sender == createButton)
		{
			if (createButton.isDown())
				clearUp();
			IRSListBox.setEnabled(!createButton.isDown());
			load(false);
		}
		else*/ if (sender == saveButton)
		{
			/*if (createButton.isDown())
				saveData();
			else*/
				updateData();
		}
		/*else if (sender == deleteButton)
		{
			deleteData();
		}*/
		else if (sender == closeButton)
		{
			MainMenuComposite.clear();
		}
		
		
	}

	@Override
	public void onChange(ChangeEvent event)
	{
		// Not implemented
	}
	
	@Override
	public void onValueChange(ValueChangeEvent<Boolean> event) {
		Widget sender = (Widget) event.getSource();
		load(false);
		
		if (sender == sendToPatientCheckBox) {
			//patientTextTextArea.setEnabled(sendToPatientCheckBox.getValue());
			
		}
		
		else if (sender == sendToProviderCheckBox) {
			//providerTextTextArea.setEnabled(sendToProviderCheckBox.getValue());
			
		}
		
		else if (sender == sendToProgramCheckBox) {
			//programTextTextArea.setEnabled(sendToProgramCheckBox.getValue());
			programNumberTextBox.setEnabled(sendToProgramCheckBox.getValue());
			
		}
		
		else if (sender == sendToOtherCheckBox) {
			//otherTextTextArea.setEnabled(sendToOtherCheckBox.getValue());
			otherNumberTextBox.setEnabled(sendToOtherCheckBox.getValue());
			
		}
		
	}
}
