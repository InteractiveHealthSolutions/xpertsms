package org.irdresearch.tbreach.server;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.irdresearch.tbreach.client.ServerService;
/*import org.irdresearch.tbreach.mobileevent.DateTimeUtil;
import org.irdresearch.tbreach.mobileevent.ModelUtil;
import org.irdresearch.tbreach.mobileevent.XmlUtil;*/
import org.irdresearch.tbreach.shared.ListType;
import org.irdresearch.tbreach.shared.Parameter;
import org.irdresearch.tbreach.shared.TBR;
import org.irdresearch.tbreach.shared.model.*;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.google.gwt.user.server.rpc.RemoteServiceServlet;

/**
 * The server side implementation of the RPC service.
 * 
 * @author owais.hussain@irdresearch.org
 */
@SuppressWarnings("serial")
public class ServerServiceImpl extends RemoteServiceServlet implements ServerService
{
	private String arrangeFilter(String filter) throws Exception
	{
		if (filter.trim().equalsIgnoreCase(""))
			return "";
		return (filter.toUpperCase().contains("WHERE") ? "" : " where ") + filter;
	}

	/**
	 * Get full name (first name + middle name + last name + surname) of any Person
	 * @param Person ID as String
	 * @return full name as String
	 */
	public String getFullName(String PID) throws Exception
	{
		if (PID.equals(""))
			return "";
		return HibernateUtil.util
				.selectObject(
						"select LTRIM(RTRIM(IFNULL(FirstName, '') + ' ' + IFNULL(MiddleName, '') + IFNULL(LastName, '') + IFNULL(Surname, ''))) from Person where PID='"
								+ PID + "'").toString().toUpperCase();
	}

	/**
	 * Get Mobile phone number of any Person
	 * @param Person ID as String
	 * @return Mobile number as String
	 */
	public String getMobileNumber(String PID) throws Exception
	{
		if (PID.equals(""))
			return "";
		return HibernateUtil.util.selectObject("select Mobile from Contact where PID='" + PID + "'").toString();
	}

	/**
	 * Sends multiple SMS
	 * @param sms
	 *//*
	@Override
	public void sendGenericSMSAlert(Sms[] sms) throws Exception
	{
		for (Sms s : sms)
			sendGenericSMSAlert(s);
	}

	*//**
	 * Sends a generic SMS
	 * @param sms
	 *//*
	@Override
	public void sendGenericSMSAlert(Sms sms)
	{
		if (!sms.getTargetNumber().equals(""))
			HibernateUtil.util.save(sms);
	}

	*//**
	 * Records messages to be send to various roles
	 * BUSINESS LOGIC:
	 * 1. If isTBPositive is true, then:
	 * 		- Send alert to Monitor, GP and CHW about Patient confirmation
	 * 		- Send alert to CHW, GP about their updated incentive balance
	 *//*
	public void sendAlertsOnClinicalDiagnosis(EncounterId encounterId, boolean isTBPositive, SetupIncentive gpIncentive, SetupIncentive chwIncentive)
			throws Exception
	{
		try
		{
			Patient patient = (Patient) HibernateUtil.util.findObject("from Patient where PatientID='" + encounterId.getPid1() + "'");
			// Get IDs
			String[] IDs = getRowRecord("Patient", new String[] { "MonitorID", "GPID", "CHWID" }, "PatientID='" + patient.getPatientId() + "'");
			String monitorID = IDs[0];
			String GPID = IDs[1];
			String CHWID = IDs[2];
			// Get mobile numbers
			String monitorMobile = getMobileNumber(monitorID);
			String GPMobile = getMobileNumber(GPID);
			String CHWMobile = null;

			if (CHWID != null)
				CHWMobile = getMobileNumber(CHWID);
			// Set SMS param
			String targetNumber = "";
			String messageText = "";
			Date dueDateTime = new Date();
			String status = "PENDING";

			if (isTBPositive)
			{
				// Send alert to Monitor, GP and CHW about Patient confirmation
				targetNumber = monitorMobile;
				messageText = "Dear Monitor! Suspect: " + patient.getPatientId()
						+ " has been confirmed as Patient based on clinical diagnosis. GP attending: " + GPID;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				targetNumber = GPMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));

				if (CHWMobile != null)
				{
					targetNumber = CHWMobile;
					messageText = "Dear Health worker! Suspect: " + patient.getPatientId()
							+ " has been confirmed as Patient based on clinical diagnosis. GP attending: " + GPID;
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
				// Send alert to CHW, GP about their updated incentive balance
				targetNumber = GPMobile;
				messageText = "Dear GP! You have been incentivised amount of " + gpIncentive.getCurrency() + gpIncentive.getAmount()
						+ " on clinical confirmation of Suspect: " + patient.getPatientId();
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));

				if (CHWMobile != null)
				{
					targetNumber = CHWMobile;
					messageText = "Dear Health worker! You have been incentivised amount of " + chwIncentive.getCurrency() + chwIncentive.getAmount()
							+ " on clinical confirmation of Suspect: " + patient.getPatientId();
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
			}
		}

		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	*//**
	 * Records messages to be sent to various roles
	 * BUSINESS LOGIC:
	 * 1. If the suspect is not confirmed, then:
	 * 		- Do nothing
	 * 2. If the suspect is confirmed, then:
	 * 		- Send alert to Monitor
	 *//*
	public void sendAlertsOnGPConfirmation(EncounterId encounterID) throws Exception
	{
		try
		{
			Patient patient = (Patient) HibernateUtil.util.findObject("from Patient where PatientID='" + encounterID.getPid1() + "'");

			Object[] obj = HibernateUtil.util.selectObjects("select MonitorID from GPMapping where GPID='" + encounterID.getPid2() + "'");
			String[] monitorIDs = new String[obj.length];
			for (int i = 0; i < obj.length; i++)
				monitorIDs[i] = obj[i].toString();
			if (patient.getPatientStatus().equalsIgnoreCase("GP_CONF"))
			{
				String targetNumber = "";
				String messageText = "";
				Date dueDateTime = new Date();
				String status = "PENDING";
				for (int i = 0; i < monitorIDs.length; i++)
				{
					String monitorMobile = getMobileNumber(monitorIDs[i]);
					targetNumber = monitorMobile;
					messageText = "Alert! Patient " + patient.getPatientId() + " confirmed as suspect by GP " + encounterID.getPid2();
					HibernateUtil.util.save(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	*//**
	 * Records messages to be sent to various roles
	 * BUSINESS LOGIC:
	 * 		- Send alert to Monitor
	 * 		- Send alert to GP about their updated incentive balance
	 *//*
	public void sendAlertsOnGPVisit(Encounter encounter, SetupIncentive gpIncentive) throws Exception
	{
		try
		{
			Patient patient = (Patient) HibernateUtil.util.findObject("from Patient where PatientID='" + encounter.getId().getPid1() + "'");

			Object[] obj = HibernateUtil.util.selectObjects("select MonitorID from GPMapping where GPID='" + encounter.getId().getPid2() + "'");
			String[] monitorIDs = new String[obj.length];
			for (int i = 0; i < obj.length; i++)
				monitorIDs[i] = obj[i].toString();

			String targetNumber = "";
			String messageText = "";
			Date dueDateTime = new Date();
			String status = "PENDING";
			Incentive incentive = new Incentive();

			for (int i = 0; i < monitorIDs.length; i++)
			{
				String monitorMobile = getMobileNumber(monitorIDs[i]);
				targetNumber = monitorMobile;
				messageText = "Alert! Patient/Suspect " + patient.getPatientId() + " visited GP " + encounter.getId().getPid2() + " on "
						+ encounter.getDateEncounterStart();
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
			}
			messageText = "Congratulations! You have been incentivised amount of " + gpIncentive.getAmount() + " on visit of Patient/Suspect "
					+ patient.getPatientId();
			targetNumber = getMobileNumber(encounter.getId().getPid2());
			incentive = new Incentive(new IncentiveId(encounter.getId().getPid2(), gpIncentive.getIncentiveId(), 0), "", new Date(), status,
					"Original message sent: " + messageText);
			HibernateUtil.util.save(incentive);
			sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	*//**
	 * Records messages to be sent to various roles
	 * BUSINESS LOGIC:
	 * 1. If isCured is true
	 * 		- Send alert to whole population
	 * 		- Send alert to GP and CHW about their updated incentive balance
	 * 2. If isCured is false and isTreatmentCompleted is true
	 *		- Send alert to Monitor
	 *		- Send alert to GP and CHW about their updated incentive balance
	 * 3. If isCured is false and isTreatmentCompleted is false
	 * 		- Send alert to Monitor
	 *//*
	public void sendAlertsOnEndFollowUp(EncounterId encounterID, SetupIncentive GPIncentive, SetupIncentive CHWIncentive, boolean isCured,
			boolean isTreatmentCompleted) throws Exception
	{
		try
		{
			Patient patient = (Patient) HibernateUtil.util.findObject("from Patient where PatientID='" + encounterID.getPid1() + "'");

			String[] monitorIDs = (String[]) HibernateUtil.util.selectObjects("select MonitorID from GPMapping where GPID='" + encounterID.getPid2()
					+ "'");
			Monitor[] monitors = new Monitor[monitorIDs.length];
			for (int i = 0; i < monitorIDs.length; i++)
			{
				monitors[i] = (Monitor) HibernateUtil.util.selectObject("from Monitor where MonitorID='" + monitorIDs[i] + "'");
			}

			String targetNumber = "";
			String messageText = "";
			Date dueDateTime = new Date();
			String status = "PENDING";

			String[] monitorMobile = new String[monitorIDs.length];
			for (int i = 0; i < monitorIDs.length; i++)
			{
				monitorMobile[i] = getMobileNumber(monitorIDs[i]);
			}
			String GPMobile = getMobileNumber(patient.getProviderId());
			String CHWMobile = getMobileNumber(patient.getScreenerId());

			if (isCured)
			{
				// Send alerts
				messageText = "Congratulations! Patient " + patient.getPatientId() + " has been cured successfully";
				String[] supervisorMobiles = (String[]) HibernateUtil.util.selectObjects("select Mobile from Contact where PID LIKE 'S%'");
				for (int i = 0; i < supervisorMobiles.length; i++)
				{
					targetNumber = supervisorMobiles[i];
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
				for (int i = 0; i < monitorMobile.length; i++)
				{
					targetNumber = monitorMobile[i];
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
				targetNumber = GPMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				targetNumber = CHWMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				// Send incentive alerts
				messageText = "Congratulations! You have been incentivised amount of " + GPIncentive.getAmount()
						+ " on successful treatment of Patient " + patient.getPatientId();
				targetNumber = GPMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				messageText = "Congratulations! You have been incentivised amount of " + CHWIncentive.getAmount()
						+ " on successful treatment of Patient " + patient.getPatientId();
				targetNumber = CHWMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
			}
			else if (!isCured && isTreatmentCompleted)
			{
				// Send alerts
				messageText = "Alert! Patient " + patient.getPatientId() + " has completed treatment";
				for (int i = 0; i < monitorMobile.length; i++)
				{
					targetNumber = monitorMobile[i];
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
				targetNumber = GPMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				targetNumber = CHWMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				// Send incentive alerts
				messageText = "Congratulations! You have been incentivised amount of " + GPIncentive.getAmount()
						+ " on treatment completion of Patient " + patient.getPatientId();
				targetNumber = GPMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				messageText = "Congratulations! You have been incentivised amount of " + CHWIncentive.getAmount()
						+ " on treatment completion of Patient " + patient.getPatientId();
				targetNumber = CHWMobile;
				sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
			}
			else if (!isCured && !isTreatmentCompleted)
			{
				// Send alerts
				messageText = "Alert! Treatment of Patient " + patient.getPatientId() + " was incomplete";
				for (int i = 0; i < monitorMobile.length; i++)
				{
					targetNumber = monitorMobile[i];
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	*//**
	 * Records messages to be sent to various roles
	 * BUSINESS LOGIC:
	 * 1. If isTBPositive is true, then:
	 * 		- Send alert to Monitor, GP and CHW about Patient confirmation
	 * 		- Send alert to CHW, GP about their updated incentive balance
	 * 2. If isTBPositive is false (suspect with result negative), then:
	 * 		- Send alert to Monitor about negative results
	 */
	/*public void sendAlertsOnGeneXpertResults(GeneXpertResults geneXpertResults, boolean isTBPositive, SetupIncentive gpIncentive,
			SetupIncentive chwIncentive) throws Exception
	{
		try
		{
			Patient patient = (Patient) HibernateUtil.util.findObject("from Patient where PatientID='" + geneXpertResults.getPatientId() + "'");

			// Get IDs
			String[] IDs = getRowRecord("Patient", new String[] { "MonitorID", "GPID", "CHWID" }, "PatientID='" + patient.getPatientId() + "'");
			String monitorID = IDs[0].toString();
			String GPID = IDs[1].toString();
			String CHWID = IDs[2].toString();
			// Get mobile numbers
			String monitorMobile = getMobileNumber(monitorID);
			String GPMobile = getMobileNumber(GPID);
			String CHWMobile = getMobileNumber(CHWID);
			// Set SMS param
			String targetNumber = "";
			String messageText = "";
			Date dueDateTime = new Date();
			String status = "PENDING";
			Incentive incentive = new Incentive();

			try
			{
				if (isTBPositive)
				{
					try
					{
						if (patient.getDiseaseConfirmed())
						{
							// Do nothing
						}
						else
							throw new Exception();
					}
					catch (Exception e)
					{
						

						// Send alert to Monitor, GP and CHW about Patient confirmation
						targetNumber = monitorMobile;
						messageText = "Dear Monitor! Suspect: " + patient.getPatientId() + " has been confirmed as Patient. GP attending: " + GPID;
						sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
						targetNumber = GPMobile;
						sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
						targetNumber = CHWMobile;
						messageText = "Dear Health worker! Suspect: " + patient.getPatientId() + " has been confirmed as Patient. GP attending: "
								+ GPID;
						sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
						// Send alert to CHW, GP about their updated incentive balance
						targetNumber = GPMobile;
						messageText = "Dear Treatment Provider! You have been incentivised amount of " + gpIncentive.getCurrency() + gpIncentive.getAmount()
								+ " on confirmation of Suspect: " + patient.getPatientId();
						incentive = new Incentive(new IncentiveId(GPID, gpIncentive.getIncentiveId(), 0), "", new Date(), status,
								"Original message sent: " + messageText);
						HibernateUtil.util.save(incentive);
						sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
						targetNumber = CHWMobile;
						messageText = "Dear Health worker! You have been incentivised amount of " + chwIncentive.getCurrency()
								+ chwIncentive.getAmount() + " on confirmation of Suspect: " + patient.getPatientId();
						incentive = new Incentive(new IncentiveId(CHWID, chwIncentive.getIncentiveId(), 0), "", new Date(), status,
								"Original message sent: " + messageText);
						HibernateUtil.util.save(incentive);
						sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
					}
				}
				else
				{
					// Send alert to Monitor
					targetNumber = monitorMobile;
					messageText = "Dear Monitor! Gene Xpert Results for Suspect: " + patient.getPatientId() + "  were found NEGATIVE.";
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}*/

	/**
	 * Records messages to be sent to various roles
	 * BUSINESS LOGIC:
	 * 1. If Suspect in screening is true, then:
	 * 		- Send alert to Monitor and CHW about Suspect confirmation
	 *//*
	public void sendAlertsOnScreening(Screening screening)
	{
		if (screening.getSuspect())
		{
			try
			{
				screening.getChwid();
				screening.getPatientId();
				// Get IDs
				String monitorID = getObject("Worker", "MonitorID", "WorkerID='" + screening.getChwid() + "'");
				// Get mobile numbers
				String monitorMobile = getMobileNumber(monitorID);
				String CHWMobile = null;

				if (screening.getChwid() != null)
					CHWMobile = getMobileNumber(screening.getChwid());
				// Set SMS param
				String targetNumber = "";
				String messageText = "";
				Date dueDateTime = new Date();
				String status = "PENDING";

				if (screening.getSuspect())
				{
					// Send alert to Monitor, GP and CHW about Patient confirmation
					targetNumber = monitorMobile;
					messageText = "Dear Monitor! A Suspect has been identified by CHW: " + screening.getChwid() + ". ID assigned: "
							+ screening.getPatientId();
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));

					if (CHWMobile != null)
					{
						targetNumber = CHWMobile;
						messageText = "Dear Screener! A Suspect has been identified. ID assigned: " + screening.getPatientId();
						sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
					}
				}
			}

			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}

	*//**
	 * Records messages to be sent to various roles
	 * BUSINESS LOGIC:
	 * 1. If the disease is not confirmed and isTBPositive is true, then:
	 * 		- Send alert to Monitor, GP and CHW about Patient confirmation
	 * 		- Send alert to CHW, GP about their updated incentive balance
	 * 2. If the disease is not confirmed and isTBPositive is false (suspect with result negative), then:
	 * 		- Send alert to Monitor about negative results
	 * 3. If the disease is confirmed and isTBPositive is true (existing Patient with result still positive), then:
	 * 		- Do nothing
	 * 4. If the disease is confirmed and isTBPositive is false (existing Patient with improvement), then:
	 * 		- Send alert to Monitor
	 * 		- Send alert to CHW about his updated incentive balance
	 * 5. If the disease is not confirmed and isTBPositive is false and Chest X-Ray has also been taken (Cleared from suspicion), then:
	 * 		- Send alert to Monitor
	 * EXCEPTION: If the Patient is like '086%' then skip the alert
	 *//*
	public void sendAlertsOnSputumResults(SputumResults sputumResults, boolean isTBPositive, SetupIncentive gpIncentive, SetupIncentive chwIncentive)
			throws Exception
	{
		try
		{
			Patient patient = (Patient) HibernateUtil.util.findObject("from Patient where PatientID='" + sputumResults.getPatientId() + "'");
			// Return on Contact Tracing Patients (ID like P86%)
			if (patient.getPatientId().contains("086"))
				return;
			// Get IDs
			String[] IDs = getRowRecord("Patient", new String[] { "MonitorID", "ProviderID", "ScreenerID" }, "PatientID='" + patient.getPatientId() + "'");
			String monitorID = IDs[0];
			String GPID = IDs[1];
			String CHWID = IDs[2];
			// Get mobile numbers
			String monitorMobile = getMobileNumber(monitorID);
			String GPMobile = getMobileNumber(GPID);
			String CHWMobile = getMobileNumber(CHWID);
			// Set SMS param
			String targetNumber = "";
			String messageText = "";
			Date dueDateTime = new Date();
			String status = "PENDING";
			Incentive incentive = new Incentive();

			if (isTBPositive)
			{
				try
				{
					if (patient.getDiseaseConfirmed())
					{
						// Do nothing
					}
					else
						throw new Exception();
				}
				catch (Exception e)
				{
					

					// Send alert to Monitor, GP and CHW about Patient confirmation
					targetNumber = monitorMobile;
					messageText = "Dear Monitor! Suspect: " + patient.getPatientId() + " has been confirmed as Patient. GP attending: " + GPID;
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
					targetNumber = GPMobile;
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
					targetNumber = CHWMobile;
					messageText = "Dear Screener! Suspect: " + patient.getPatientId() + " has been confirmed as Patient. GP attending: " + GPID;
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
					// Send alert to CHW, GP about their updated incentive balance
					targetNumber = GPMobile;
					messageText = "Dear Treatment Provider! You have been incentivised amount of " + gpIncentive.getCurrency() + gpIncentive.getAmount()
							+ " on confirmation of Suspect: " + patient.getPatientId();
					// Record GP incentive
					incentive = new Incentive(new IncentiveId(GPID, gpIncentive.getIncentiveId(), 0), "", new Date(), status,
							"Original message sent: " + messageText);
					HibernateUtil.util.save(incentive);
					// Send alert
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
					targetNumber = CHWMobile;
					messageText = "Dear Screener! You have been incentivised amount of " + chwIncentive.getCurrency() + chwIncentive.getAmount()
							+ " on confirmation of Suspect: " + patient.getPatientId();
					incentive = new Incentive(new IncentiveId(CHWID, chwIncentive.getIncentiveId(), 0), "", new Date(), status,
							"Original message sent: " + messageText);
					HibernateUtil.util.save(incentive);
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
			}
			else
			{
				try
				{
					if (patient.getDiseaseConfirmed())
					{
						// Send alert to Monitor
						targetNumber = monitorMobile;
						messageText = "Dear Monitor! Sputum Results of Patient: " + patient.getPatientId() + " for the month of "
								+ sputumResults.getMonth() + " were found NEGATIVE.";
						sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
						targetNumber = CHWMobile;
						messageText = "Dear Screener! You have been incentivised amount of " + chwIncentive.getCurrency()
								+ chwIncentive.getAmount() + " on improvement of Patient: " + patient.getPatientId();
						// Record GP incentive
						incentive = new Incentive(new IncentiveId(CHWID, chwIncentive.getIncentiveId(), 0), "", new Date(), "",
								"Original message sent: " + messageText);
						HibernateUtil.util.save(incentive);
						sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
					}
					else
						throw new Exception();
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	*//**
	 * Records messages to be sent to various roles
	 * BUSINESS LOGIC:
	 * 1. If isTBPositive is true, then:
	 * 		- Send alert to Monitor M-VICTOR-##
	 *//*
	public void sendAlertsOnXRay(XrayResults xRayResults, boolean isTBPositive) throws Exception
	{
		try
		{
			Patient patient = (Patient) HibernateUtil.util.findObject("from Patient where PatientID = '" + xRayResults.getId().getPatientId() + "'");
			// Get mobile number
			String monitorMobile = getMobileNumber("M-VICTOR-01");
			// Set SMS param
			String targetNumber = "";
			String messageText = "";
			Date dueDateTime = new Date();
			String status = "PENDING";

			if (isTBPositive)
			{
				try
				{
					// Send alert to Monitor about Patient confirmation
					targetNumber = monitorMobile;
					messageText = "Dear Monitor! Suspect: " + patient.getPatientId() + " was found " + xRayResults.getXrayResults()
							+ " by the X-Ray results. (SMS sent on " + dueDateTime.toString() + ")";
					sendGenericSMSAlert(new Sms(targetNumber, messageText, dueDateTime, null, status, null, null));
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
*/

	
	/**
	 * User authentication:
	 * Checks whether user exists, then match his password
	 * @return Boolean
	 */
	@Override
	public Boolean authenticate(String userName, String password) throws Exception
	{
		if (!UserAuthentication.userExsists(userName))
			return false;
		else if (!UserAuthentication.validatePassword(userName, password))
			return false;
		TBR.setCurrentUser(userName.toUpperCase());
		return true;
	}

	/**
	 * Checks if a user exists in the database
	 * @return Boolean
	 */
	@Override
	public Boolean authenticateUser(String userName) throws Exception
	{
		if (!UserAuthentication.userExsists(userName))
			return false;
		return true;
	}

	/**
	 * Verifies secret answer against stored secret question
	 * @return Boolean
	 */
	@Override
	public Boolean verifySecretAnswer(String userName, String secretAnswer) throws Exception
	{
		if (!UserAuthentication.validateSecretAnswer(userName, secretAnswer))
			return false;
		return true;
	}

	/**
	 * Get number of records in a table, given appropriate filter
	 * @return Long
	 */
	@Override
	public Long count(String tableName, String filter) throws Exception
	{
		Object obj = HibernateUtil.util.selectObject("select count(*) from " + tableName + " " + arrangeFilter(filter));
		return Long.parseLong(obj.toString());
	}

	/**
	 * Checks existence of data by counting number of records in a table, given appropriate filter
	 * @return Boolean
	 */
	@Override
	public Boolean exists(String tableName, String filter) throws Exception
	{
		long count = count(tableName, filter);
		return count > 0;
	}

	/**
	 * Generates CSV file from query passed along with the filters
	 * @param query
	 * @return
	 */
	@Override
	public String generateCSVfromQuery(String query) throws Exception
	{
		return ReportUtil.generateCSVfromQuery(query, ',');
	}
	
	/**
	 * Generate report on server side and return the path it was created to
	 * @param
	 * 		Path of report as String
	 * 		Report parameters as Parameter[]
	 * 		Report to be exported in csv format as Boolean
	 * @return String
	 */
	@Override
	public String generateReport(String fileName, Parameter[] params, boolean export) throws Exception
	{
		return ReportUtil.generateReport(fileName, params, export);
	}

	/**
	 * Generate report on server side based on the query saved in the Database against the reportName and return the path it was created to
	 * @param reportName
	 * @param params
	 * @param export
	 * @return 
	 */
	@Override
	public String generateReportFromQuery(String reportName, String query, Boolean export) throws Exception
	{
		return ReportUtil.generateReportFromQuery(reportName, query, export);
	}

	@Override
	public String[] getColumnData(String tableName, String columnName, String filter) throws Exception
	{
		Object[] data = HibernateUtil.util.selectObjects("select distinct " + columnName + " from " + tableName + " " + arrangeFilter(filter));
		String[] columnData = new String[data.length];
		for (int i = 0; i < data.length; i++)
			columnData[i] = data[i].toString();
		return columnData;
	}

	@Override
	public String getCurrentUser() throws Exception
	{
		return TBR.getCurrentUser();
	}

	@Override
	public String[][] getLists() throws Exception
	{
		String[][] lists = null;
		ArrayList<ArrayList<String>> arrayList = new ArrayList<ArrayList<String>>();
		try
		{
			DocumentBuilderFactory buildFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder documentBuilder = buildFactory.newDocumentBuilder();
			File file = new File(TBR.getStaticFilePath());
			Document doc = documentBuilder.parse(file);
			Element docElement = doc.getDocumentElement();
			for (ListType type : ListType.values())
			{
				ArrayList<String> array = new ArrayList<String>();
				NodeList list = docElement.getElementsByTagName(type.toString());
				if (list != null)
				{
					for (int i = 0; i < list.getLength(); i++)
					{
						Node node = list.item(i);
						NodeList children;
						if (node.getNodeType() == Node.ELEMENT_NODE)
						{
							children = node.getChildNodes();
							if (children.getLength() > 0)
							{
								for (int j = 0; j < children.getLength(); j++)
								{
									NodeList items = children.item(j).getChildNodes();
									for (int k = 0; k < items.getLength(); k++)
									{
										String str = items.item(k).getTextContent();
										array.add(str);
									}
								}
							}
						}
					}
				}
				arrayList.add(array);
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		lists = new String[arrayList.size()][];
		for (int i = 0; i < arrayList.size(); i++)
		{
			String[] str = new String[0];
			lists[i] = arrayList.get(i).toArray(str);
		}
		return lists;
	}

	@Override
	public String getObject(String tableName, String columnName, String filter) throws Exception
	{
		return HibernateUtil.util.selectObject("select " + columnName + " from " + tableName + arrangeFilter(filter)).toString();
	}

	@Override
	public String[][] getReportsList() throws Exception
	{
		return ReportUtil.getReportList();
	}

	@Override
	public String[] getRowRecord(String tableName, String[] columnNames, String filter) throws Exception
	{
		return getTableData(tableName, columnNames, filter)[0];
	}

	@Override
	public String getSecretQuestion(String userName) throws Exception
	{
		Users user = (Users) HibernateUtil.util.findObject("from Users where UserName = '" + userName + "'");
		return user.getSecretQuestion();
	}

	@SuppressWarnings("deprecation")
	@Override
	public String getSnapshotTime() throws Exception
	{
		Date dt = new Date();
		Object obj = HibernateUtil.util.selectObject("select Max(DateEncounterEnd) from tbreach_rpt.Encounter where DATE(DateEncounterEnd) < '"
				+ (dt.getYear() + 1900) + "-" + (dt.getMonth() + 1) + "-" + dt.getDate() + "'");
		return obj.toString();
	}

	@Override
	public String[][] getTableData(String tableName, String[] columnNames, String filter) throws Exception
	{
		StringBuilder columnList = new StringBuilder();
		for (String s : columnNames)
		{
			columnList.append(s);
			columnList.append(",");
		}
		columnList.deleteCharAt(columnList.length() - 1);

		Object[][] data = HibernateUtil.util.selectData("select " + columnList.toString() + " from " + tableName + " " + arrangeFilter(filter));
		String[][] stringData = new String[data.length][columnNames.length];
		for (int i = 0; i < data.length; i++)
		{
			for (int j = 0; j < columnNames.length; j++)
			{
				if (data[i][j] == null)
					data[i][j] = "";
				String str = data[i][j].toString();
				stringData[i][j] = str;
			}
		}
		return stringData;
	}

	@Override
	public Boolean[] getUserRgihts(String userName, String menuName) throws Exception
	{
		String role = HibernateUtil.util.selectObject("select Role from Users where UserName='" + userName + "'").toString();
		if (role.equalsIgnoreCase("ADMIN"))
		{
			Boolean[] rights = { true, true, true, true, true };
			return rights;
		}
		UserRights userRights = (UserRights) HibernateUtil.util.findObject("from UserRights where Role='" + role + "' and MenuName='" + menuName
				+ "'");
		Boolean[] rights = { userRights.isSearchAccess(), userRights.isInsertAccess(), userRights.isUpdateAccess(), userRights.isDeleteAccess(),
				userRights.isPrintAccess() };
		return rights;
	}

	@Override
	public void recordLogin(String userName) throws Exception
	{
		Users user = (Users) HibernateUtil.util.findObject("from Users where UserName = '" + userName + "'");
		HibernateUtil.util.recordLog(LogType.LOGIN, user);
	}

	@Override
	public void recordLogout(String userName) throws Exception
	{
		Users user = (Users) HibernateUtil.util.findObject("from Users where UserName = '" + userName + "'");
		HibernateUtil.util.recordLog(LogType.LOGOUT, user);
	}

	@Override
	public int execute(String query) throws Exception
	{
		return HibernateUtil.util.runCommand(query);
	}

	@Override
	public Boolean execute(String[] queries) throws Exception
	{
		for (String s : queries)
		{
			boolean result = execute(s) >= 0;
			if (!result)
				return false;
		}
		return true;
	}

	@Override
	public Boolean executeProcedure(String procedure) throws Exception
	{
		return HibernateUtil.util.runProcedure(procedure);
	}

	/* Delete methods */
	@Override
	public Boolean deleteCity(SetupCity city) throws Exception
	{
		return HibernateUtil.util.delete(city);
	}

	@Override
	public Boolean deleteContact(Contact contact) throws Exception
	{
		return HibernateUtil.util.delete(contact);
	}

	@Override
	public Boolean deleteCountry(SetupCountry country) throws Exception
	{
		return HibernateUtil.util.delete(country);
	}

	

	@Override
	public Boolean deleteEncounter(Encounter encounter) throws Exception
	{
		return HibernateUtil.util.delete(encounter);
	}

	@Override
	public Boolean deleteEncounterResults(EncounterResults encounterResults) throws Exception
	{
		return HibernateUtil.util.delete(encounterResults);
	}

	@Override
	public Boolean deleteEncounterResults(EncounterResultsId encounterResultsId) throws Exception
	{
		boolean result = false;
		EncounterResults er = (EncounterResults) HibernateUtil.util.findObject("from EncounterResults where EncounterId="
				+ encounterResultsId.getEncounterId() + " and PID1='" + encounterResultsId.getPid1() + "' and PID2='" + encounterResultsId.getPid2()
				+ "' and Element='" + encounterResultsId.getElement() + "'");
		result = deleteEncounterResults(er);
		return result;
	}

	@Override
	public Boolean deleteEncounterWithResults(Encounter encounter) throws Exception
	{
		boolean result = false;
		try
		{
			String[] elements = getColumnData("EncounterResults", "Element", "EncounterID=" + encounter.getId().getEncounterId() + " AND PID1='"
					+ encounter.getId().getPid1() + "' AND PID2='" + encounter.getId().getPid2() + "'");
			// Delete encounter results
			for (String s : elements)
			{
				EncounterResultsId id = new EncounterResultsId(encounter.getId().getEncounterId(), encounter.getId().getPid1(), encounter.getId()
						.getPid2(), s);
				result = deleteEncounterResults(id);
			}
			// Delete encounter
			result = deleteEncounter(encounter);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return result;
	}

	
	@Override
	public Boolean deleteGeneXpertResults(GeneXpertResults geneXpertResults) throws Exception
	{
		return HibernateUtil.util.delete(geneXpertResults);
	}

	@Override
	public Boolean deleteGP(Gp gp, Person person, Contact contact, Users user) throws Exception
	{
		return HibernateUtil.util.delete(user) && HibernateUtil.util.delete(gp) && HibernateUtil.util.delete(person)
				&& HibernateUtil.util.delete(contact);
	}

	
	@Override
	public Boolean deleteLocation(Location location) throws Exception
	{
		return HibernateUtil.util.delete(location);
	}

	

	

	@Override
	public Boolean deletePatient(Patient patient) throws Exception
	{
		return HibernateUtil.util.delete(patient);
	}

	

	@Override
	public Boolean deletePerson(Person person) throws Exception
	{
		return HibernateUtil.util.delete(person);
	}

	

	

	@Override
	public Boolean deleteSputumResults(SputumResults sputumResults) throws Exception
	{
		return HibernateUtil.util.delete(sputumResults);
	}

	

	@Override
	public Boolean deleteUser(Users user) throws Exception
	{
		return HibernateUtil.util.delete(user);
	}

	@Override
	public Boolean deleteUserRights(UserRights userRights) throws Exception
	{
		return HibernateUtil.util.delete(userRights);
	}

	@Override
	public Boolean deleteWorker(Worker worker, Person person, Contact contact, Users user) throws Exception
	{
		return HibernateUtil.util.delete(user) && HibernateUtil.util.delete(worker) && HibernateUtil.util.delete(person)
				&& HibernateUtil.util.delete(contact);
	}

	@Override
	public Boolean deleteXrayResults(XrayResults xrayResults) throws Exception
	{
		return HibernateUtil.util.delete(xrayResults);
	}

	/* Find methods */
	@Override
	public Contact findContact(String personID) throws Exception
	{
		return (Contact) HibernateUtil.util.findObject("from Contact where PID='" + personID + "'");
	}

	
	@Override
	public Encounter findEncounter(EncounterId encounterID) throws Exception
	{
		return (Encounter) HibernateUtil.util.findObject("from Encounter where PID1='" + encounterID.getPid1() + "' and PID2='"
				+ encounterID.getPid2() + "' and EncounterID='" + encounterID.getEncounterId() + "'");
	}

	@Override
	public EncounterResults[] findEncounterResults(EncounterResultsId encounterResultsID) throws Exception
	{
		return (EncounterResults[]) HibernateUtil.util.findObjects("from EncounterResults where PID1='" + encounterResultsID.getPid1()
				+ "' and PID2='" + encounterResultsID.getPid2() + "' and EncounterID='" + encounterResultsID.getEncounterId() + "'");
	}

	@Override
	public EncounterResults findEncounterResultsByElement(EncounterResultsId encounterResultsID) throws Exception
	{
		return (EncounterResults) HibernateUtil.util.findObject("from EncounterResults where PID1='" + encounterResultsID.getPid1() + "' and PID2='"
				+ encounterResultsID.getPid2() + "' and EncounterID='" + encounterResultsID.getEncounterId() + "' and Element='"
				+ encounterResultsID.getElement() + "'");
	}

	@Override
	public GeneXpertResults findGeneXpertResults(String sputumTestID) throws Exception
	{
		return (GeneXpertResults) HibernateUtil.util.findObject("from GeneXpertResults where SputumTestID='" + sputumTestID + "'");
	}

	@Override
	public GeneXpertResults findGeneXpertResultsByTestID(String testID) throws Exception
	{
		return (GeneXpertResults) HibernateUtil.util.findObject("from GeneXpertResults where TestID='" + testID + "'");
	}
	
	@Override
	public Gp findGP(String GPID) throws Exception
	{
		return (Gp) HibernateUtil.util.findObject("from Gp where GPID='" + GPID + "'");
	}

	

	@Override
	public Location findLocation(String locationID) throws Exception
	{
		return (Location) HibernateUtil.util.findObject("from Location where LocationID='" + locationID + "'");
	}
	
	@Override
	public MessageSettings findMessageSettings() throws Exception
	{
		return (MessageSettings) HibernateUtil.util.findObject("from MessageSettings");
	}

	

	

	@Override
	public Patient findPatient(String patientID) throws Exception
	{
		return (Patient) HibernateUtil.util.findObject("from Patient where PatientID='" + patientID + "'");
	}

	

	@Override
	public Person findPerson(String PID) throws Exception
	{
		return (Person) HibernateUtil.util.findObject("from Person where PID='" + PID + "'");
	}

	@Override
	public Person[] findPersonsByName(String firstName, String lastName) throws Exception
	{
		return (Person[]) HibernateUtil.util.findObjects("from Person where FirstName LIKE '" + firstName + "%' and LastName LIKE '" + lastName
				+ "%'");
	}

	@Override
	public Person findPersonsByNIC(String NIC) throws Exception
	{
		return (Person) HibernateUtil.util.findObject("from Person where NIC='" + NIC + "'");
	}

	
	@Override
	public SputumResults findSputumResults(String patientID, String sputumTestID) throws Exception
	{
		return (SputumResults) HibernateUtil.util.findObject("from SputumResults where PatientID='" + patientID + "' and SputumTestID='"
				+ sputumTestID + "'");
	}

	@Override
	public SputumResults[] findSputumResultsByPatientID(String patientID) throws Exception
	{
		return (SputumResults[]) HibernateUtil.util.findObjects("from SputumResults where PatientID='" + patientID + "'");
	}

	@Override
	public SputumResults findSputumResultsBySputumTestID(String sputumTestID) throws Exception
	{
		return (SputumResults) HibernateUtil.util.findObject("from SputumResults where SputumTestID='" + sputumTestID + "'");
	}

	@Override
	public Supervisor findSupervisor(String supervisorID) throws Exception
	{
		return (Supervisor) HibernateUtil.util.findObject("from Supervisor where SupervisorID='" + supervisorID + "'");
	}


	@Override
	public Users findUser(String userName) throws Exception
	{
		return (Users) HibernateUtil.util.findObject("from Users where UserName='" + userName + "'");
	}

	@Override
	public UserRights findUserRights(String roleName, String menuName) throws Exception
	{
		return (UserRights) HibernateUtil.util.findObject("from UserRights where Role='" + roleName + "' and MenuName='" + menuName + "'");
	}

	@Override
	public Worker findWorker(String workerID) throws Exception
	{
		return (Worker) HibernateUtil.util.findObject("from Worker where WorkerID='" + workerID + "'");
	}

	@Override
	public XrayResults findXrayResults(String irs) throws Exception
	{
		return (XrayResults) HibernateUtil.util.findObject("from XrayResults where IRS='" + irs + "'");
	}

	/* Save methods */
	@Override
	public Boolean saveCity(SetupCity city) throws Exception
	{
		return HibernateUtil.util.save(city);
	}

	@Override
	public Boolean saveContact(Contact contact) throws Exception
	{
		return HibernateUtil.util.save(contact);
	}

	

	@Override
	public Boolean saveCountry(SetupCountry country) throws Exception
	{
		return HibernateUtil.util.save(country);
	}

	

	@Override
	public Boolean saveEncounter(Encounter encounter) throws Exception
	{
		// Get the max encounter ID and add 1
		EncounterId currentID = encounter.getId();
		Object[] max = HibernateUtil.util.selectObjects("select max(encounterID) from Encounter where pid1='" + currentID.getPid1() + "' and pid2='"
				+ currentID.getPid2() + "'");

		Integer maxInt = (Integer) max[0];
		if (maxInt == null)
		{
			currentID.setEncounterId(1);
		}
		else
		{
			currentID.setEncounterId((maxInt.intValue() + 1));
		}
		encounter.setId(currentID);
		return HibernateUtil.util.save(encounter);
	}

	@Override
	public Boolean saveEncounterResults(EncounterResults encounterResults) throws Exception
	{
		return HibernateUtil.util.save(encounterResults);
	}

	@Override
	public Boolean saveEncounterWithResults(Encounter encounter, ArrayList<String> encounterResults) throws Exception
	{
		boolean result = false;
		// Save an encounter
		try
		{
			Long encounterID = HibernateUtil.util.count("select IFNULL(max(EncounterID), 0) + 1 from Encounter where PID1='"
					+ encounter.getId().getPid1() + "' and PID2='" + encounter.getId().getPid2() + "' and EncounterType='"
					+ encounter.getEncounterType() + "'");
			result = saveEncounter(encounter);

			for (String s : encounterResults)
			{
				String[] split = s.split("=");
				EncounterResults encounterResult = new EncounterResults();
				encounterResult.setId(new EncounterResultsId(encounterID.intValue(), encounter.getId().getPid1(), encounter.getId().getPid2(),
						split[0]));
				if (split.length == 2)
					encounterResult.setValue((split[1]));
				else
					encounterResult.setValue("");
				result = saveEncounterResults(encounterResult);
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return result;
	}

	

	@Override
	public Boolean saveGeneXpertResults(GeneXpertResults geneXpertResults) throws Exception
	{
		return HibernateUtil.util.save(geneXpertResults);
	}
	
	@Override
	public Boolean saveGeneXpertResultsUnlinked(GeneXpertResultsUnlinked geneXpertResultsU) throws Exception
	{
		return HibernateUtil.util.save(geneXpertResultsU);
	}

	@Override
	public Boolean saveGP(Gp gp, Person person, Contact contact, Users user) throws Exception
	{
		boolean result = false;
		try
		{
			result = saveUser(user);
		}
		catch (Exception e)
		{
			result = false;
		}
		return result && HibernateUtil.util.save(gp) && HibernateUtil.util.save(person) && HibernateUtil.util.save(contact);
	}

	

	@Override
	public Boolean saveLocation(Location location) throws Exception
	{
		return HibernateUtil.util.save(location);
	}
	
	@Override
	public Boolean saveMessageSettings(MessageSettings messageSettings) throws Exception
	{
		return HibernateUtil.util.save(messageSettings);
	}

	@Override
	public Boolean saveNewPatient(Patient patient, Person person, Contact contact, Encounter encounter, ArrayList<String> encounterResults) throws Exception
	{
		boolean result = false;
		// Save an encounter
		try
		{
			result = saveEncounterWithResults(encounter, encounterResults);
			/*Encounter encounter = new Encounter(new EncounterId(0, patient.getPatientId(), patient.getChwid()), "SUSPECT_ID",
					patient.getTreatmentCenter(), new Date(), new Date(), new Date(), "");
			HibernateUtil.util.save(encounter);
			Long encounterID = HibernateUtil.util.count("select count(*) from Encounter where PID1='" + encounter.getId().getPid1() + "' and PID2='"
					+ encounter.getId().getPid2() + "' and EncounterType='" + encounter.getEncounterType() + "'");

			for (String s : encounterResults)
			{
				String[] split = s.split("=");
				EncounterResults encounterResult = new EncounterResults();
				encounterResult.setId(new EncounterResultsId(encounterID.intValue(), encounter.getId().getPid1(), encounter.getId().getPid2(),
						split[0]));
				encounterResult.setValue(split[1]);
				HibernateUtil.util.save(encounterResult);
			}*/
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}

		result = HibernateUtil.util.save(patient);
		result = HibernateUtil.util.save(person);
		result = HibernateUtil.util.save(contact);
		if (!result) // In case of failure of any save, delete all 3
		{
			HibernateUtil.util.delete(patient);
			HibernateUtil.util.delete(person);
			HibernateUtil.util.delete(contact);
			return false;
		}
		return result;
	}

	

	@Override
	public Boolean savePatient(Patient patient) throws Exception
	{
		return HibernateUtil.util.save(patient);
	}

	
	@Override
	public Boolean savePerson(Person person) throws Exception
	{
		return HibernateUtil.util.save(person);
	}

	

	@Override
	public Boolean saveSputumResults(SputumResults sputumResults) throws Exception
	{
		return HibernateUtil.util.save(sputumResults);
	}

	

	@Override
	public Boolean saveUser(Users user) throws Exception
	{
		user.setPassword(MDHashUtil.getHashString(user.getPassword()));
		user.setSecretAnswer(MDHashUtil.getHashString(user.getSecretAnswer()));
		return HibernateUtil.util.save(user);
	}

	@Override
	public Boolean saveUserRights(UserRights userRights) throws Exception
	{
		return HibernateUtil.util.save(userRights);
	}

	@Override
	public Boolean saveWorker(Worker worker, Person person, Contact contact, Users user) throws Exception
	{
		boolean result = false;
		try
		{
			result = saveUser(user);
		}
		catch (Exception e)
		{
			result = false;
		}
		return result && HibernateUtil.util.save(worker) && HibernateUtil.util.save(person) && HibernateUtil.util.save(contact);
	}

	@Override
	public Boolean saveXrayResults(XrayResults xrayResults) throws Exception
	{
		return HibernateUtil.util.save(xrayResults);
	}

	/* Update methods */
	@Override
	public Boolean updateContact(Contact contact) throws Exception
	{
		return HibernateUtil.util.update(contact);
	}

	

	@Override
	public Boolean updateEncounter(Encounter encounter) throws Exception
	{
		return HibernateUtil.util.update(encounter);
	}

	@Override
	public Boolean updateEncounterResults(EncounterResults encounterResults) throws Exception
	{
		return HibernateUtil.util.update(encounterResults);
	}

	@Override
	public Boolean updateEncounterResults(EncounterResultsId encounterResultsId, String newValue) throws Exception
	{
		EncounterResults encounterResults = (EncounterResults) HibernateUtil.util.findObject("from EncounterResults where EncounterId="
				+ encounterResultsId.getEncounterId() + " and PID1='" + encounterResultsId.getPid1() + "' and PID2='" + encounterResultsId.getPid2()
				+ "' and Element='" + encounterResultsId.getElement() + "'");
		encounterResults.setValue(newValue);
		return HibernateUtil.util.update(encounterResults);
	}

	
	@Override
	public Boolean updateGeneXpertResults(GeneXpertResults geneXpertResults, Boolean isTBPositive) throws Exception
	{
		Boolean result = HibernateUtil.util.update(geneXpertResults);
		if (isTBPositive)
		{
			SMSUtil.util.sendAlertsOnGXPResults(geneXpertResults);//, isTBPositive, gpIncentive, chwIncentive);
		}
		return result;
	}

	@Override
	public Boolean updateGP(Gp gp, Person person, Contact contact, Users user) throws Exception
	{
		return HibernateUtil.util.update(user) && HibernateUtil.util.update(gp) && HibernateUtil.util.update(person)
				&& HibernateUtil.util.update(contact);
	}

	

	@Override
	public Boolean updateLocation(Location location) throws Exception
	{
		return HibernateUtil.util.update(location);
	}
	
	@Override
	public Boolean updateMessageSettings(MessageSettings messageSettings) throws Exception
	{
		return HibernateUtil.util.update(messageSettings);
	}

	

	
	@Override
	public Boolean updatePassword(String userName, String newPassword) throws Exception
	{
		Users user = (Users) HibernateUtil.util.findObject("from Users where UserName = '" + userName + "'");
		user.setPassword(MDHashUtil.getHashString(newPassword));
		return HibernateUtil.util.update(user);
	}

	@Override
	public Boolean updatePatient(Patient patient) throws Exception
	{
		return HibernateUtil.util.update(patient);
	}

	

	@Override
	public Boolean updatePerson(Person person) throws Exception
	{
		return HibernateUtil.util.update(person);
	}

	

	@Override
	public Boolean updateSetupCity(SetupCity city) throws Exception
	{
		return HibernateUtil.util.update(city);
	}

	@Override
	public Boolean updateSetupCountry(SetupCountry country) throws Exception
	{
		return HibernateUtil.util.update(country);
	}

	

	@Override
	public Boolean updateSputumResults(SputumResults sputumResults, Boolean isTBPositive) throws Exception
	{
		Boolean result = HibernateUtil.util.update(sputumResults);
		/*if (isTBPositive)
		{
			String gpIncentiveID = "GP_DETECT";
			String chwIncentiveID = "CHW_DETECT";
			SetupIncentive gpIncentive = (SetupIncentive) HibernateUtil.util.findObject("from SetupIncentive where IncentiveID='" + gpIncentiveID
					+ "' and BeneficiaryGroup='GP'");
			SetupIncentive chwIncentive = (SetupIncentive) HibernateUtil.util.findObject("from SetupIncentive where IncentiveID='" + chwIncentiveID
					+ "' and BeneficiaryGroup='CHW'");
			//sendAlertsOnSputumResults(sputumResults, isTBPositive, gpIncentive, chwIncentive);
		}*/
		return result;
	}

	

	@Override
	public Boolean updateUser(Users user) throws Exception
	{
		user.setPassword(MDHashUtil.getHashString(user.getPassword()));
		user.setSecretAnswer(MDHashUtil.getHashString(user.getSecretAnswer()));
		return HibernateUtil.util.update(user);
	}

	@Override
	public Boolean updateUserRights(UserRights userRights) throws Exception
	{
		return HibernateUtil.util.update(userRights);
	}

	@Override
	public Boolean updateWorker(Worker worker, Person person, Contact contact, Users user) throws Exception
	{
		return HibernateUtil.util.update(user) && HibernateUtil.util.update(worker) && HibernateUtil.util.update(person)
				&& HibernateUtil.util.update(contact);
	}

	@Override
	public Boolean updateXrayResults(XrayResults xrayResults) throws Exception
	{
		Boolean result = HibernateUtil.util.update(xrayResults);
		/*if (xrayResults.getXrayResults().equalsIgnoreCase("SUGGESTIVE OF TB") || xrayResults.getXrayResults().equalsIgnoreCase("SUSPICIOUS OF TB"))
		{
			sendAlertsOnXRay(xrayResults, true);
		}*/
		return result;
	}
	
	public Boolean updateGeneXpertResultsAuto(GeneXpertResults geneXpertResults, Boolean isTBPositive,String operatorId,String pcId,String instrumentSerial,String moduleId,String cartridgeId,String reagentLotId) throws Exception
	{
		Boolean result = HibernateUtil.util.update(geneXpertResults);
		if (isTBPositive != null)
			SMSUtil.util.sendAlertsOnAutoGXPResults(geneXpertResults,operatorId,pcId,instrumentSerial,moduleId,cartridgeId,reagentLotId);
		return result;
	}
		//////////////
	
	@Override
	public Boolean saveSputumCollection(GeneXpertResults geneXpertResults, SputumResults sputumResults, Encounter encounter, ArrayList<String> encounterResults) throws Exception
	{
		/*String xml = null;*/
		
		Boolean result = null;
		
		if(sputumResults!=null) {
			System.out.println("saving sputum");
			Boolean exists = null;
			
			try {
				exists = exists("EncounterResults", " where Element='SAMPLE_BARCODE' AND Value='" + sputumResults.getSputumTestId() + "'");
			} catch (Exception e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
				return false;
			}
			
			saveSputumResults(sputumResults);
		}
		
		if(geneXpertResults!=null) {
			System.out.println("xpert");
			Boolean exists = null;
			
			try {
				exists = exists("EncounterResults", " where Element='SAMPLE_BARCODE' AND Value='" + geneXpertResults.getSputumTestId() + "'");
			} catch (Exception e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
				return false;
			}
			
			saveGeneXpertResults(geneXpertResults);
		}
		
		result = saveEncounterWithResults(encounter, encounterResults);

		
		return true;
		/*String sputumMonth = request.getParameter("scm");
		
		
		String barCode = request.getParameter("sbc");
		String doSmear = request.getParameter("smear");
		String doXpert = request.getParameter("xpert");


		String startDate = request.getParameter("sd");
		String startTime = request.getParameter("st");
		String endTime = request.getParameter("et");
		String enteredDate = request.getParameter("ed");

		if(v==null || sputumMonth==null || sputumMonth.length()==0) {
			return XmlUtil.createErrorXml("Phone update karain aur dobara koshish karain");
		}
		
		Patient pat = null;

		try {
			pat = ssl.findPatient(id);
		} catch (Exception e) {
			//  Auto-generated catch block
			e.printStackTrace();
		}
		
		if(pat==null) {
			return XmlUtil.createErrorXml("Patient with id " + id + " does not exist. Please recheck ID and try again.");
		}*/
		
		/*if(barCode!=null && barCode.length()!=0) {
			Boolean exists = null;
			
			try {
				exists = ssl.exists("EncounterResults", " where Element='SAMPLE_BARCODE' AND Value='" + barCode + "'");
			} catch (Exception e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			
			if(exists==null) {
				System.out.println("null");
				return XmlUtil.createErrorXml("Error tracking Bar Code Number. Please try again!");
			}
			
			else if(exists.booleanValue()==true) {
				System.out.println("true");
				return XmlUtil.createErrorXml("This Bar Code has already been collected. Please recheck Bar Code and try again");
			}
			
			exists = null;
		
			try {
				exists = ssl.exists("SputumResults", " where SputumTestID='" + barCode + "'");
			} catch (Exception e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			
			if(exists==null) {
				System.out.println("null");
				return XmlUtil.createErrorXml("Error tracking Bar Code Number. Please try again!");
			}
			
			else if(exists.booleanValue()==true) {
				System.out.println("true");
				return XmlUtil.createErrorXml("This Bar Code has already been collected. Please recheck Bar Code and try again");
			}
			
			//if not found in SputumResults check in ContactSputumResults
			if(exists.booleanValue()==false) {
				try {
					exists = ssl.exists("ContactSputumResults", " where SputumTestID='" + barCode + "'");
				} catch (Exception e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
			
				if(exists==null) {
					System.out.println("null");
					return XmlUtil.createErrorXml("Error tracking Bar Code Number. Please try again!");
				}
			
				else if(exists.booleanValue()==true) {
					System.out.println("true");
					return XmlUtil.createErrorXml("This Bar Code has already been collected. Please recheck Bar Code and try again");
				}	
			}
		}

		EncounterId encId = new EncounterId();
		encId.setPid1(id);
		encId.setPid2(mid);

		Encounter e = new Encounter();
		e.setId(encId);
		e.setEncounterType("SPUTUM_COL");
		e.setDateEncounterStart(encounterStartDate);
		e.setDateEncounterEnd(encounterEndDate);
		try {
			e.setDateEncounterEntered(DateTimeUtil.getDateFromString(enteredDate, DateTimeUtil.FE_FORMAT));
		}
		
		catch(Exception e1) {
			e1.printStackTrace();
			return XmlUtil.createErrorXml("Bad entered date. Please try again");
		}

		try {
			boolean eCreated = ssl.saveEncounter(e);
		} catch (Exception e1) {
			//  Auto-generated catch block
			e1.printStackTrace();
			return XmlUtil.createErrorXml("Error occurred. Please try again");
		}
		
		
			String encMonth = "";
			System.out.println("SPUTUM MONTH---->" + sputumMonth);
			
			if(sputumMonth.equals("0")) {
				encMonth = "BASELINE";
			}
			
			else if(sputumMonth.equals("1")) {
				encMonth = "1ST";
			}
			
			else if(sputumMonth.equals("2")) {
				encMonth = "2ND";
			}
			
			else if(sputumMonth.equals("3")) {
				encMonth = "3RD";
			}
			
			else {
				encMonth = sputumMonth + "TH";
			}
		

		ArrayList<EncounterResults> encounters = new ArrayList<EncounterResults>();

		EncounterResults dateResult = ModelUtil.createEncounterResult(e,
				"entered_date".toUpperCase(), enteredDate);
		encounters.add(dateResult);

		EncounterResults patientStatusResult = ModelUtil.createEncounterResult(
				e, "patient_status".toUpperCase(), patientStatus.toUpperCase());
		encounters.add(patientStatusResult);

		EncounterResults collectionMonthResult = ModelUtil
				.createEncounterResult(e, "collection_month".toUpperCase(),
						encMonth.toUpperCase());
		encounters.add(collectionMonthResult);

		EncounterResults suspectSampleNumberResult = ModelUtil
				.createEncounterResult(e, "suspect_sample".toUpperCase(),
						sampleNumber.toUpperCase());
		encounters.add(suspectSampleNumberResult);

		EncounterResults sputumCollectedResult = ModelUtil
				.createEncounterResult(e, "sputum_collected".toUpperCase(),
						sputumCollected.toUpperCase());
		encounters.add(sputumCollectedResult);

		if (barCode != null) {
			EncounterResults barcodeResult = ModelUtil.createEncounterResult(e,
					"sample_barcode".toUpperCase(), barCode.toUpperCase());
			encounters.add(barcodeResult);
			
		if(doSmear!=null) {	
			EncounterResults doSmearResult = ModelUtil.createEncounterResult(e,
					"do_smear".toUpperCase(), doSmear.toUpperCase());
			encounters.add(doSmearResult);
		
		}
		
		if(doXpert!=null) {
			
			EncounterResults doXpertResult = ModelUtil.createEncounterResult(e,
					"do_xpert".toUpperCase(), doXpert.toUpperCase());
			encounters.add(doXpertResult);
		}
		}

		boolean resultSave = true;

		for (int i = 0; i < encounters.size(); i++) {
			try {
				resultSave = ssl.saveEncounterResults(encounters.get(i));
			} catch (Exception e1) {
				//  Auto-generated catch block
				e1.printStackTrace();
				break;
			}

			if (!resultSave) {
				return XmlUtil.createErrorXml("Error occurred. Please try again");
			}

		}

		// //TODO: Modify for three tables:
		//If baseline: Add to SputumResults, GXPert Results, Chest Xray
		//Else: Just add to SputumResults
		if(barCode!=null && barCode.length()!=0) {
			
			if (doSmear != null && doSmear.equalsIgnoreCase("yes")) {
				SputumResults sr = new SputumResults();
				sr.setSputumTestId(Integer.parseInt(barCode));
				sr.setPatientId(id);
				sr.setMonth(Integer.parseInt(sputumMonth));
				sr.setIrs(0);
				// sr.setDateSubmitted(encounterStartDate);

				try {
					ssl.saveSputumResults(sr);
				} catch (Exception e2) {
					e2.printStackTrace();
					return XmlUtil
							.createErrorXml("Error saving Sputum Results. Please try again");
				}
			}
			if(doXpert!=null && doXpert.equalsIgnoreCase("yes")) {
				
				//GXP
				GeneXpertResults gxp = new GeneXpertResults();
				gxp.setIsPositive(new Boolean(false));
				gxp.setPatientId(id);
				gxp.setSputumTestId(Integer.parseInt(barCode));
				gxp.setIrs(0);
				
				try {
					ssl.saveGeneXpertResults(gxp);
				} catch (Exception e1) {
					e1.printStackTrace();
					return XmlUtil.createErrorXml("Error saving GeneXpert Results. Please try again");
				}
				
				
			
			}
		}
		
		try {
			updateReturningPatientAfterNAF(id);
		} catch (Exception e1) {
			e1.printStackTrace();
			XmlUtil.createErrorXml("Tafseel bhej di gayi laikin patient status update nahin huwa. TB REACH team se foran rujoo karain");
		}
		xml = XmlUtil.createSuccessXml();
		return xml;*/
	}
	
}